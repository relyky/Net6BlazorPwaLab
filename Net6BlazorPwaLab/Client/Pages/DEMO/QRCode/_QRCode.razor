@page "/qrcode"

<PageTitle>掃描QR Code</PageTitle>

<MudContainer>
  <MudText Typo=Typo.h3>展示掃描QR Code</MudText>
  <MudText Typo=Typo.body1>展示掃描QR Code。需支援HTML5以上瀏灠器。</MudText>

  <MudButton Variant=Variant.Outlined Color=Color.Warning OnClick=HandleScanQrCode>可連續掃描QR Code</MudButton>
  <MudButton Variant=Variant.Outlined Color=Color.Warning OnClick=HandleStopScan>停止掃描</MudButton>
  <MudCheckBox @bind-Checked=@f_readStop Color=Color.Warning Label="掃描成功後立刻停止掃描" />

  <AsvtQrCodeReader @ref=@qrcReader NotReadStop=@(!f_readStop) OnResponse=HandleScanResponse />

  <p>qrCode(@scanCount):@qrCode</p>
  <p>warnMsg(@warnCount):@warnMsg</p>
  <p>errorMsg(@errorCount):@errorMsg</p>
</MudContainer>

@code {
  //## State
  string qrCode = string.Empty;
  int scanCount = 0;
  string warnMsg = string.Empty;
  int warnCount = 0;
  string errorMsg = string.Empty;
  int errorCount = 0;
  bool f_readStop = true;

  //## Resource
  AsvtQrCodeReader qrcReader;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    //qrcSvc.OnScanResponseEvnet += HandleScanResponse;
  }

  async Task HandleScanQrCode()
  {
    scanCount = warnCount = errorCount = 0;
    await qrcReader.StartScanAsync();
  }

  async Task HandleStopScan()
  {
    await qrcReader.StopScanAsync();
  }

  /// <summary>
  /// 用於連續掃描 QR Code 時取得掃描結果。
  /// </summary>
  void HandleScanResponse(QRCodeInterop.ScanResponseEvnetArgs args)
  {
    switch (args.type)
    {
      case "SUCCESS":
        qrCode = args.message;
        scanCount++;
        break;
      case "WARN":
      case "STOP":
        warnMsg = args.message;
        warnCount++;
        break;
      default:
        errorMsg = args.message;
        errorCount++;
        break;
    }

    StateHasChanged();
  }
}
