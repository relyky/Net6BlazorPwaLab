@* 應用範例
  <PdfJsViewer
  Url="https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/examples/learning/helloworld.pdf"
  Print
  />
  <script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
*@

@implements IDisposable
@inject IJSRuntime jsr

<div class="pdfjs-viewer">
  <canvas id="the-canvas" class="the-canvas" @ref=@theCanvasRef></canvas>
</div>
<button type="button" onclick="printJS('docs/printjs.pdf')">
  Print PDF
</button>
<button @onclick=PrintPdf>列印</button>
<p>@message</p>

@code {
  [Parameter] public string Url { get; set; } = string.Empty;
  [Parameter] public bool Print { get; set; } = false;

  // State
  string message = "[Empty]";

  // Resource
  ElementReference theCanvasRef;
  PdfToolJsInterop pdfSvc;

  public void Dispose()
  {
    pdfSvc?.DisposeAsync();
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    pdfSvc = new PdfToolJsInterop(jsr);
    //geoSvc.OnWatchResponseEvnet += HandleWatchResponse;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      await pdfSvc.InitAsync();
    }
  }

  async Task PrintPdf()
  {
    //## 以 URL 送印 PDF
    string url = "https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/examples/learning/helloworld.pdf";
    await jsr.InvokeVoidAsync("printJS", url);
    message = "已送印";

    #region ## 以 base64 格式送印 PDF
    ////# make html with data.
    //string html = biz.MakeHtmlPage(/* data */);
    //byte[] fileBlob = biz.HtmlToPdf(html);
    //
    ////# binary 轉換成 base64
    //string base64 = Convert.ToBase64String(fileBlob);
    //await jsr.InvokeVoidAsync("printJS", new
    //{
    //  printable = base64,
    //  type = "pdf",
    //  base64 = true
    //});
    #endregion
  }

  async Task HandleClick()
  {
    message = await pdfSvc.Prompt("test go");
  }
}