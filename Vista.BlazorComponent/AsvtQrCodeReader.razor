@inject IJSRuntime jsr
@implements IDisposable

<div class="qrcode-containter">
  <div id=@elementId style="visibility:hidden"></div>
</div>

@* for DEBUG
<pre>@elementId</pre> 
*@

@code {
  /// <summary>
  /// 成功掃描 QR Code 就立刻停止
  /// </summary>
  [Parameter] public bool NotReadStop { get; set; } = false;

  /// <summary>
  /// 回應掃描結果
  /// </summary>
  [Parameter, EditorRequired] public EventCallback<QRCodeInterop.ScanResponseEvnetArgs> OnResponse { get; set;}

  //# resource
  string elementId { get; init; } = $"qrcodeReader-{Guid.NewGuid():N}";
  QRCodeInterop qrcSvc;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    qrcSvc = new QRCodeInterop(jsr);
    qrcSvc.OnScanResponseEvnet += HandleScanResponse;
  }

  public void Dispose()
  {
    qrcSvc?.DisposeAsync();
  }

  /// <summary>
  /// 回應掃描結果。可應用於連續掃描。
  /// </summary>
  void HandleScanResponse(object sender, QRCodeInterop.ScanResponseEvnetArgs args)
  {
    OnResponse.InvokeAsync(args);
  }

  //## public Method --------------------------

  /// <summary>
  /// 開始掃描 QR Code。可應用於連續掃描。
  /// </summary>
  public async Task StartScanAsync()
  {
    await qrcSvc.StartScanAsync(elementId, !NotReadStop);
  }

  /// <summary>
  /// 停止掃描 QR Code。
  /// </summary>
  public async Task StopScanAsync()
  {
    await qrcSvc.StopScanAsync();
  }
}
