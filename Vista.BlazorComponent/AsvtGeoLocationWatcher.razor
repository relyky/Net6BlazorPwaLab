@implements IDisposable
@inject IJSRuntime jsr

<div class="geolocation-containter">
  WatchId:@($"{WatchId}")
  @ChildContent(Position)
</div>

@code {
  [Parameter, EditorRequired] public RenderFragment<GeoLocationInterop.GeolocationPosition?> ChildContent { get; set; }

  //## State
  GeoLocationInterop.GeolocationPosition? Position = null;
  public int WatchId = -1;

  //## Resource
  GeoLocationInterop geoSvc;

  public void Dispose()
  {
    geoSvc?.DisposeAsync();
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    geoSvc = new GeoLocationInterop(jsr);
    geoSvc.OnWatchResponseEvnet += HandleWatchResponse;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      // WatchId = await geoSvc.StartWatchAsync();
    }
  }

  void HandleWatchResponse(object sender, GeoLocationInterop.WatchResponseEvnetArgs e)
  {
    Position = e.Position;
    StateHasChanged();
  }
}
