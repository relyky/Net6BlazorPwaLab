@implements IDisposable
@inject IJSRuntime jsr

<div class="geolocation-containter">
  @* for DEBUG *@
  watchId:@($"{watchId}({watchCounter})")
  
  @ChildContent(Position)
</div>

@code {
  [Parameter] public RenderFragment<GeoLocationInterop.GeolocationPosition?> ChildContent { get; set; }
  [Parameter] public bool Open { get; set; }
  [Parameter] public EventCallback<bool> OpenChanged { get; set; }

  //## State
  GeoLocationInterop.GeolocationPosition? Position = null;
  int watchId = -1;
  int watchCounter = 0; 

  //## Property
  public bool IsWatching => watchId > 0;

  //## Resource
  GeoLocationInterop geoSvc;

  public void Dispose()
  {
    geoSvc?.DisposeAsync();
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    geoSvc = new GeoLocationInterop(jsr);
    geoSvc.OnWatchResponseEvnet += HandleWatchResponse;
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    if (Open && !IsWatching)
    {
      watchId = await geoSvc.StartWatchAsync();
      watchCounter = 0;
      await OpenChanged.InvokeAsync(true);
    }
    if (!Open && IsWatching)
    {
      await geoSvc.StopWatchAsync(watchId);
      watchId = -1;
      await OpenChanged.InvokeAsync(false);
    }
  }

  void HandleWatchResponse(object sender, GeoLocationInterop.WatchResponseEvnetArgs e)
  {
    Position = e.Position;
    watchCounter++;
    StateHasChanged();
  }
}
